{"version":3,"sources":["Globals.ts","actions/authActions.ts","components/auth/login.tsx","components/auth/signup.tsx","components/common/header.tsx","socket.ts","actions/messagesActions.ts","components/user/messages.tsx","actions/usersAction.ts","components/user/messageView.tsx","components/router.tsx","reducers/authReducer.ts","reducers/messagesReducer.ts","reducers/usersReducer.ts","reducers/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["apiUrl","parseJwt","token","base64","split","replace","JSON","parse","window","atob","getCurrentUser","dispatch","localStorage","getItem","type","payload","id","console","log","fetch","concat","then","res","json","data","user","LoginComponent","state","disabled","password","showPassword","username","message","isOpen","onLockClick","_this","setState","onLogin","props","login","this","_this2","_this$state","react_default","a","createElement","react_router","to","lockButton","tooltip","content","buttons","icon","intent","Intent","WARNING","minimal","onClick","callout","className","title","PRIMARY","html","inputGroup","large","min","max","placeholder","rightElement","iconSize","onChange","e","target","value","fill","round","alert_alert","canOutsideClickCancel","confirmButtonText","onConfirm","DANGER","React","Component","connect","_state$auth","auth","_ref","body","stringify","headers","Content-Type","method","setItem","info","catch","err","SignupComponent","dateOfBirth","Date","onSignup","signup","react","userIcon","errors","_ref2","Header","nextProp","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","react_router_dom","color","navbar","style","backgroundColor","renderLinks","socket","io","port","getUserMessages","Headers","append","Messages","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","messages","users","link","text","msgUser","sender","receiver","cursor","openMessage","bind","assertThisInitialized","_id","src","profileImage","history","push","onSelect","length","filteredUser","filter","includes","renderItem","item","isHighlighted","key","emit","on","getUsers","Autocomplete_default","inputProps","items","u","getItemValue","renderMenu","map","MessageView","initUser","currentUser","date","msgDate","toUTCString","clsName","send","match","params","receiverId","getUser","_this$state$user","width","height","Home","RootRouter","header","path","exact","component","INIT_STATE","authStatus","combineReducers","arguments","undefined","action","objectSpread","store","createStore","rootReducer","applyMiddleware","ReduxThunk","App","es","router","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6f9cc22.chunk.js","sourcesContent":["export const apiUrl = \"http://localhost:8080/api/\";\n\nexport const parseJwt = (token: string) => {\n    const base64Url = token.split(\".\")[1];\n    const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n    return JSON.parse(window.atob(base64));\n};\n\n","import { apiUrl, parseJwt } from \"../Globals\";\nexport const LOGIN = \"LOGIN\";\nexport const SIGNUP = \"SIGNUP\";\nexport const CHECK_LOGIN = \"CHECK_LOGIN\";\nexport const GET_CURRENT_USER = \"GET_CURRENT_USER\";\nexport const AUTH_ERR = \"AUTH_ERR\";\n\nexport const login = (\n    { username, password }: { username: string, password: string },\n) => (dispatch: any) => {\n    const body = {\n        password,\n        username,\n    };\n    fetch(`${apiUrl}users/login`, {\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n    })\n\n        .then((res) => res.json())\n        .then((data) => {\n            if (data.token) {\n                localStorage.setItem(\"auth-token\", data.token);\n\n                dispatch({\n                    payload: data.user,\n                    type: LOGIN,\n                });\n                return;\n            }\n            dispatch({\n                payload: data.info.message,\n                type: AUTH_ERR,\n            });\n        })\n        .catch((err) => dispatch({\n            payload: err.message,\n            type: AUTH_ERR,\n        }));\n};\n\nexport const signup = ({\n    username,\n    password,\n    dateOfBirth,\n}: {\n    username: string,\n    password: string,\n    dateOfBirth: Date,\n}) => (dispatch: any) => {\n    const body = {\n        dateOfBirth,\n        password,\n        username,\n    };\n\n    fetch(`${apiUrl}users/signup`, {\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n    })\n        .then((res) => res.json())\n        .then((data) => {\n            if (data.token) {\n                dispatch({\n                    payload: data.message,\n                    type: SIGNUP,\n                });\n                localStorage.setItem(\"auth-token\", data.token);\n                return;\n            }\n            console.log(data);\n            dispatch({\n                payload: data.message,\n                type: AUTH_ERR,\n            });\n\n        })\n        .catch((err) => dispatch({\n            payload: err.message,\n            type: AUTH_ERR,\n        }));\n};\n\nexport const checkLogin = () => {\n    const token = localStorage.getItem(\"auth-token\");\n    if (token) {\n        return {\n            payload: true,\n            type: CHECK_LOGIN,\n        };\n    }\n    return {\n        payload: false,\n        type: CHECK_LOGIN,\n    };\n};\n\nexport const getCurrentUser = () => (dispatch: any) => {\n    const token = localStorage.getItem(\"auth-token\");\n    if (!token) {\n        return dispatch({ type: GET_CURRENT_USER, payload: null });\n    }\n    const id = parseJwt(token).id;\n    console.log(parseJwt(token));\n    fetch(`${apiUrl}users/${id}`)\n        .then((res) => res.json())\n        .then((data) => dispatch({\n            payload: data.user,\n            type: GET_CURRENT_USER,\n        }));\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { login, getCurrentUser } from \"../../actions/authActions\";\nimport {\n    Button,\n    InputGroup,\n    Tooltip,\n    Intent,\n    Icon,\n    Callout,\n    Label,\n    Alert\n} from \"@blueprintjs/core\";\nimport { AuthActions } from \"./interfaces\";\nimport { Redirect } from \"react-router\";\n\nclass LoginComponent extends React.Component<AuthActions, {}> {\n    public state = {\n        disabled: false,\n        password: \"\",\n        showPassword: false,\n        username: \"\",\n        message: null,\n        isOpen: false,\n    };\n    componentWillMount() {\n        this.props.getCurrentUser()\n    }\n\n    componentWillUpdate(props: any) {\n        const { message } = props;\n        if (props.user) {\n            return;\n        }\n        if (message !== \"\" && message !== this.state.message) {\n            this.setState({ message, isOpen: true });\n        }\n    }\n\n    render() {\n        const { showPassword, disabled, isOpen } = this.state;\n        if (this.props.user) {\n            return <Redirect to=\"/\" />\n        }\n        const lockButton = (\n            <Tooltip content={`${showPassword ? \"Hide\" : \"Show\"} Password`}>\n                <Button\n                    icon={showPassword ? \"unlock\" : \"lock\"}\n                    intent={Intent.WARNING}\n                    minimal={true}\n                    onClick={this.onLockClick}\n                />\n            </Tooltip>\n        );\n        return (\n            <Callout className=\"container mt-5\" title=\"Sign-up\" icon=\"new-person\" intent={Intent.PRIMARY}>\n            <Label>\n            Usernname\n                <InputGroup\n                    large={true}\n                    min={5}\n                    max={20}\n                    placeholder=\"Enter your username...\"\n                    rightElement={(<Icon icon=\"user\" iconSize={20} />)}\n                    onChange={(e: any) => this.setState({ username: e.target.value })}\n                    intent={Intent.PRIMARY}\n                    fill={true}\n                    round={true}\n                    type={\"text\"}\n                />\n                </Label>\n                <Label>\n                Password\n                <InputGroup\n                    disabled={disabled}\n                    large={true}\n                    min={8}\n                    placeholder=\"Enter your password...\"\n                    rightElement={lockButton}\n                    onChange={(e: any) => this.setState({ password: e.target.value })}\n                    intent={Intent.PRIMARY}\n                    fill={true}\n                    round={true}\n                    type={showPassword ? \"text\" : \"password\"}\n                />\n                </Label>\n                <Alert \n                    isOpen={isOpen} \n                    canOutsideClickCancel={true}\n                    confirmButtonText=\"Ok\"\n                    onConfirm={() => this.setState({ isOpen: false })}\n                    intent={Intent.DANGER}\n                >\n                {this.state.message}\n                </Alert>\n                <Button\n                    icon={\"log-in\"}\n                    intent={Intent.PRIMARY}\n                    minimal={false}\n                    large={true}\n                    onClick={this.onLogin}\n                />\n\n            </Callout>\n        );\n    }\n    private onLockClick = () => this.setState({ showPassword: !this.state.showPassword });\n    private onLogin = () => {\n        this.props.login(this.state);\n        this.setState({ message: \"\", isOpen: false,});\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const { user, message } = state.auth;\n    return { user, message };\n};\n\nexport default connect(mapStateToProps, { login, getCurrentUser })(LoginComponent);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signup, getCurrentUser } from \"../../actions/authActions\";\nimport {\n    Button,\n    Callout,\n    InputGroup,\n    Tooltip,\n    Intent,\n    Label\n} from \"@blueprintjs/core\";\nimport { AuthActions } from \"./interfaces\";\nimport { Redirect } from \"react-router\";\n\nclass SignupComponent extends React.Component<AuthActions, {}> {\n    state = {\n        dateOfBirth: new Date(),\n        disabled: false,\n        password: \"\",\n        showPassword: false,\n        username: \"\",\n        message: null\n    };\n\n    componentWillMount() {\n        this.props.getCurrentUser()\n    }\n\n    render() {\n        const { showPassword, disabled } = this.state;\n        if (this.props.user) {\n            return <Redirect to=\"/\" />\n        }\n        const lockButton = (\n            <Tooltip content={`${showPassword ? \"Hide\" : \"Show\"} Password`}>\n                <Button\n                    icon={showPassword ? \"unlock\" : \"lock\"}\n                    intent={Intent.WARNING}\n                    minimal={true}\n                    onClick={this.onLockClick}\n                />\n            </Tooltip>\n        );\n        const userIcon = (\n        <Tooltip content=\"Username\">\n            <Button\n                icon={\"user\"}\n                intent={Intent.WARNING}\n                minimal={true}\n            />\n        </Tooltip>\n        );\n        return (\n            <Callout className=\"container mt-5\" title=\"Sign-up\" icon=\"new-person\" intent={Intent.PRIMARY}>\n                <Label>\n                    Username\n                <InputGroup\n                    large={true}\n                    placeholder=\"Enter your username...\"\n                    rightElement={userIcon}\n                    onChange={(e: any) => this.setState({ username: e.target.value })}\n                    intent={Intent.PRIMARY}\n                    fill={true}\n                    round={true}\n                    type={\"text\"}\n                />\n                </Label>\n                <Label>\n                    Password\n                <InputGroup\n                    large={true}\n                    placeholder=\"Enter your password...\"\n                    rightElement={lockButton}\n                    onChange={(e: any) => this.setState({ password: e.target.value })}\n                    intent={Intent.PRIMARY}\n                    fill={true}\n                    round={true}\n                    type={showPassword ? \"text\" : \"password\"}\n                />\n                </Label>\n                <Label>\n                    Date of birth\n                <InputGroup\n                    onChange={(e: any) => this.setState({ dateOfBirth: e.target.value })}\n                    placeholder={\"Date of birth\"}\n                    intent={Intent.PRIMARY}\n                    fill={true}\n                    round={true}\n                    large={true}\n                    type={\"date\"}\n                />\n                </Label>\n                <Button\n                    icon={\"new-person\"}\n                    intent={Intent.PRIMARY}\n                    minimal={false}\n                    large={true}\n                    onClick={this.onSignup}\n                />\n            </Callout>\n        );\n    }\n    private onLockClick = () => this.setState({ showPassword: !this.state.showPassword });\n    private onSignup = () => {\n        console.log(this.state);\n        this.props.signup(this.state);\n        this.setState({ message: \"\", username: \"\", password: \"\", dateOfBirth: \"\" });\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const { message, errors, user } = state.auth;\n    console.log(state);\n    return { message, errors, user };\n};\n\nexport default connect(mapStateToProps, { signup, getCurrentUser })(SignupComponent);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getCurrentUser } from \"../../actions/authActions\";\nimport { AuthActions } from \"../auth/interfaces\";\nimport { connect } from \"react-redux\";\nimport {\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    Alignment,\n} from \"@blueprintjs/core\";\n\nclass Header extends React.Component<AuthActions, {}> {\n    state = {};\n    componentWillMount() {\n        this.props.getCurrentUser();\n    }\n\n    componentWillReceiveProps(nextProp: any) {\n        if (!nextProp.user) {\n\n        }\n    }\n\n    renderLinks() {\n        if (!this.props.user) {\n            return (\n                <NavbarGroup align={Alignment.LEFT}>\n                    <NavbarHeading>\n                        Meows Chat\n                    </NavbarHeading>\n                    <NavbarDivider />\n                    <Link to=\"/signup/\" color=\"#fff\">Signup</Link>\n                    <NavbarDivider />\n                    <Link to=\"/login/\" color=\"#fff\">Login</Link>\n                </NavbarGroup>\n            )\n        } else {\n            return (\n                <NavbarGroup align={Alignment.LEFT}>\n                    <NavbarHeading>\n                        Meows Chat\n                    </NavbarHeading>\n                    <NavbarDivider />\n                    <Link to=\"/\" color=\"#fff\">Home</Link>\n                    <NavbarDivider />\n                    <Link to=\"/messages\" color=\"#fff\">Messages</Link>\n                </NavbarGroup>\n            )\n        }\n    }\n    render() {\n        return (\n            <Navbar style={{ backgroundColor: \"#2B95D6\", color: \"#fff\" }} className=\"bp3-text-large\">\n                    {this.renderLinks()}\n            </Navbar>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const { user } = state.auth;\n    return { user };\n};\n\nexport default connect(mapStateToProps, { getCurrentUser })(Header);\n","import io from \"socket.io-client\";\n\nexport const socket = io(\"localhost:8080\", {port: \"8080\"});\n","import { apiUrl, parseJwt } from \"../Globals\";\n\nexport const GET_MESSAGES = \"GET_MESSAGES\";\n\nexport const getUserMessages = () => (dispatch: any) => {\n    const token = localStorage.getItem(\"auth-token\");\n    if (!token) {\n        return dispatch({ type: GET_MESSAGES, payload: [] });\n    }\n    const headers = new Headers();\n    headers.append(\"Authorization\", `Bearer ${token}`);\n    fetch(`${apiUrl}messages/`, { headers })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(data);\n            dispatch({\n            payload: data.user,\n            type: GET_MESSAGES,\n        })\n    });\n};\n\n\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport Autocomplete from \"react-autocomplete\";\nimport { socket } from \"../../socket\";\nimport { getCurrentUser } from '../../actions/authActions';\nimport { getUserMessages } from '../../actions/messagesActions';\nimport { getUsers } from '../../actions/usersAction';\nimport './messages.css';\n\nclass Messages extends React.Component<any, any> {\n    state = {\n        username: \"\",\n        messages: [],\n        users: []\n    }\n    private token: string | null;\n    constructor(props: any) {\n        super(props);\n        this.token = localStorage.getItem(\"auth-token\");\n        socket.emit(\"getMessages\", { token: this.token });\n        socket.on(\"getMessages\", (data: any) => {\n            this.setState({ messages: data.messages });\n        });\n    }\n    componentWillMount() {\n        this.props.getCurrentUser();\n        this.props.getUserMessages();\n        this.props.getUsers();\n    }\n\n    componentWillReceiveProps(props: any) {\n        this.setState({ users: props.users });\n    }\n\n    link = (text: string, id: string) => {\n        return (<Link to={`/messages/${id}`}>{text}</Link>)\n    }\n\n    message = (message: any) => {\n        const msgUser = (typeof message.sender === \"string\") ? message.receiver : message.sender;\n\n        return (\n            <li\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\n            >\n                <div className=\"d-flex bd-highlight\" style={{ cursor: \"pointer\" }} onClick={this.openMessage.bind(this, msgUser._id)}>\n                    <div className=\"img_cont\">\n                        <img\n                            src={msgUser.profileImage}\n                            className=\"rounded rounded-circle user_img\"\n                        />\n                    </div>\n                    <div className=\"user_info\">\n                        <span style={{ color: \"black\" }}>{msgUser.username}</span>\n                    </div>\n                </div>\n            </li>\n        );\n    }\n    render() {\n        const { users, username, messages } = this.state;\n        if (!this.token) {\n            return <Redirect to=\"/login\" />\n        }\n        return (\n            <div className=\"container h-150\">\n                <div className=\"col-md-8 col-xl-8 ml-3 mr-3 chat\">\n                    <div className=\"card mb-sm-3 mb-md-0 contacts_card\">\n                        <div className=\"card-header\">\n                            <div className=\"input-group\">\n                                <Autocomplete\n                                    inputProps={{ className: \"form-control search\", placeholder: \"Search...\" }}\n                                    value={username}\n                                    items={users.filter((u: any) => u.username.includes(username))}\n                                    getItemValue={(item) => item.username}\n                                    onSelect={this.onSelect}\n                                    onChange={this.onChange}\n                                    renderMenu={(users) => <ul className=\"menu list-group\">{users}</ul>}\n                                    renderItem={this.renderItem}\n                                />\n                                <div className=\"input-group-prepend\">\n                                    <span className=\"input-group-text search_btn\">\n                                        <i className=\"fas fa-search\" />\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body contacts_body\">\n                            <ul className=\"contacts\">\n                                {messages.map((message: any) => this.message(message))}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    private openMessage: any = (id: string) => {\n        return this.props.history.push(\"/message/\" + id);\n    }\n    private onSelect = (value: string, user: any) => {\n        // set the menu to only the selected item\n        this.openMessage(user._id);\n    }\n\n    private onChange = (e: any, username: string) => {\n        this.setState({ username });\n        if (username.length >= 1) {\n            const filteredUser = this.props.users.filter((user: any) => user.username.includes(username));\n            this.setState({ users: filteredUser });\n        }\n    }\n\n    private renderItem = (item: any, isHighlighted: any) => (\n        <li\n            className={`${isHighlighted ? 'active' : ''} list-group-item`}\n            key={item._id}\n        >{item.username}\n        </li>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    const { user } = state.auth;\n    const { messages } = state.messages;\n    const { users } = state.users;\n    return { user, messages, users };\n}\nexport default connect(mapStateToProps, { getCurrentUser, getUserMessages, getUsers })(Messages);\n","import { apiUrl } from \"../Globals\";\n\nexport const GET_USERS = \"GET_USERS\";\nexport const GET_USER = \"GET_USER\";\n\nexport const getUsers = () => (dispatch: any) => {\n    fetch(`${apiUrl}users/`,)\n    .then((res) => res.json())\n    .then((data) => {\n        dispatch({\n        payload: data.users,\n        type: GET_USERS,\n    })\n});\n}\n\nexport const getUser = (id: string) => (dispatch: any) => {\n    fetch(`${apiUrl}users/${id}`,)\n    .then((res) => res.json())\n    .then((data) => {\n        dispatch({\n        payload: data.user,\n        type: GET_USER,\n    })\n});\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { socket } from \"../../socket\";\nimport { getCurrentUser } from '../../actions/authActions';\nimport { getUserMessages } from '../../actions/messagesActions';\nimport { getUser } from '../../actions/usersAction';\n\nclass MessageView extends Component<any, any> {\n    initUser = { username: \"\", profileImage: \"\" };\n    state = {\n        messages: [],\n        body: \"\",\n        user: this.initUser, \n        currentUser: this.initUser\n    };\n    private token = localStorage.getItem(\"auth-token\");\n\n    constructor(props: any) {\n        super(props);\n        const { id } = this.props.match.params;\n        this.props.getCurrentUser();\n        this.props.getUser(id);\n        socket.emit(\"getMessagesWithUser\", { token: this.token, receiverId: id });\n        socket.on(\"getMessagesWithUser\", (data: { messages: any[] }) => {\n            this.setState({ messages: data.messages });\n        });\n    }\n\n    componentWillReceiveProps(props: any) {\n        if (props.user) {\n        this.setState({ user: props.user, currentUser: props.currentUser });\n        }\n    }\n    message = (message: any) => {\n        const { sender, body, date } = message;\n        const { user } = this.props;\n        console.log(message, user)\n        const msgDate = new Date(date).toUTCString().split(\" \");\n        const clsName = `d-flex justify-content-${sender._id === user._id ? \"start\" : \"end\"} mb-4`;\n        return (\n            <div className={clsName}>\n                <div className=\"img_cont_msg\">\n                    <img src={message.sender.profileImage} className=\"rounded-circle user_img_msg\" />\n                </div>\n                <div className=\"msg_cotainer\">\n                    {body}\n                    <span className=\"msg_time\">{msgDate[4]},{msgDate[0]}</span>\n                </div>\n            </div>\n        );\n    }\n    render() {\n        const { messages, user = this.initUser } = this.state;\n        return (\n            <div className=\"col-md-10 col-xl-8 offset-2 mt-4 chat\">\n                <div className=\"card\">\n                    <div className=\"card-header msg_head\">\n                        <div className=\"d-flex bd-highlight\">\n                            <div className=\"img_cont\">\n                                <img src={user.profileImage} className=\"img_cont rounded-circle\" width=\"50\" height=\"50\"/>\n                            </div>\n                            <div className=\"user_info\">\n                                <h4>{user.username}</h4>\n                                <p>{messages.length} Messages</p>\n                            </div>\n                            <div className=\"video_cam\">\n                                <span><i className=\"fas fa-video\"></i></span>\n                                <span><i className=\"fas fa-phone\"></i></span>\n                            </div>\n                        </div>\n                        <span id=\"action_menu_btn\"><i className=\"fas fa-ellipsis-v\"></i></span>\n                        <div className=\"action_menu\">\n                            <ul>\n                                <li><i className=\"fas fa-user-circle\"></i> View profile</li>\n                                <li><i className=\"fas fa-users\"></i> Add to close friends</li>\n                                <li><i className=\"fas fa-plus\"></i> Add to group</li>\n                                <li><i className=\"fas fa-ban\"></i> Block</li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div className=\"card-body msg_card_body\">\n                        {messages.map(message => this.message(message))}\n                    </div>\n                    <div className=\"card-footer\">\n                        <div className=\"input-group\">\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text attach_btn\"><i className=\"fas fa-paperclip\"></i></span>\n                            </div>\n                            <textarea\n                                className=\"form-control type_msg\"\n                                placeholder=\"Type your message...\"\n                                value={this.state.body}\n                                onChange={(e: any) => this.setState({ body: e.target.value })}\n                            >\n                            </textarea>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text send_btn\">\n                                    <button className=\"glyphicon glyphicon-send\" onClick={this.send}>\n                                        Send\n                                            </button>\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    private send = () => {\n        const { id } = this.props.match.params;\n        const { currentUser } = this.props;\n        socket.emit(\"newMessage\", { token: this.token, body: this.state.body, receiverId: id, sender: currentUser.id });\n        socket.emit(\"getMessagesWithUser\", { token: this.token, receiverId: id });\n        this.setState({ body: \"\" });\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const currentUser = state.auth.user;\n    const { messages } = state.messages;\n    const { user } = state.users;\n    return { currentUser, messages, user };\n}\n\nexport default connect(mapStateToProps, { getCurrentUser, getUserMessages, getUser })(MessageView);\n","import React from \"react\";\nimport {\n  BrowserRouter as\n  Router,\n  Route,\n} from \"react-router-dom\";\nimport LoginComponent from \"./auth/login\";\nimport SignupComponent from \"./auth/signup\";\nimport Header from \"./common/header\";\nimport Messages from \"./user/messages\";\nimport MessageView from \"./user/messageView\";\n\nconst Home = () => <h2>Home</h2>;\n\nclass RootRouter extends React.Component {\n  public render() {\n    return (\n      <Router>\n        <div>\n        <Header />\n          <Route path=\"/\" exact={true} component={Home} />\n          <Route path=\"/message/:id\" component={MessageView}/>\n          <Route path=\"/messages\" component={Messages}/>\n          <Route path=\"/login\" component={LoginComponent} />\n          <Route path=\"/signup\" component={SignupComponent} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default RootRouter;\n","import { LOGIN, SIGNUP, CHECK_LOGIN, GET_CURRENT_USER, AUTH_ERR } from \"../actions/authActions\";\n\nconst INIT_STATE = { user: null, authStatus: false, message: \"\" };\n\nexport default (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                ...state,\n                user: action.payload,\n            };\n        case GET_CURRENT_USER:\n            return {\n                ...state,\n                user: action.payload,\n            };\n        case SIGNUP:\n            return {\n                ...state,\n                message: action.payload,\n            }\n        case CHECK_LOGIN:\n            return {\n                ...state,\n                authStatus: action.payload,\n            };\n        case AUTH_ERR:\n            return {\n                ...state,\n                message: action.payload,\n            };\n        default:\n            return state;\n    }\n}","import { GET_MESSAGES} from \"../actions/messagesActions\";\n\nconst INIT_STATE = { messages: [] };\n\nexport default (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case GET_MESSAGES:\n            return {\n                ...state,\n                messages: action.payload,\n            };\n        default:\n            return state;\n    }\n}","import { GET_USERS, GET_USER } from \"../actions/usersAction\";\n\nconst INIT_STATE = { users: [], user: {} };\n\nexport default (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case GET_USERS:\n            return {\n                ...state,\n                users: action.payload,\n            };\n        case GET_USER:\n            return {\n                ...state,\n                user: action.payload,\n            };\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport authReducer from \"./authReducer\";\nimport messagesReducer from \"./messagesReducer\";\nimport usersReducer from \"./usersReducer\";\n\nexport default combineReducers({\n  auth: authReducer,\n  messages: messagesReducer,\n  users: usersReducer\n});\n","import React from \"react\";\nimport Router from \"./components/router\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer, {}, applyMiddleware(ReduxThunk));\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n        <Router />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}